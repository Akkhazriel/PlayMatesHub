import cron from 'node-cron';
import db from '../db.js';
import { getRandomAdByType } from '../utils/getRandomAdByType.js';
import bot from '../bot.js';
import { logAdView } from '../services/ads.service.js';
import { escapeMarkdown } from '../utils/escapeMarkdown.js'; // —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–∞–∫–æ–π –º–æ–¥—É–ª—å –µ—Å—Ç—å

// –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

cron.schedule('0 * * * *', async () => {
  try {
    const ad = await getRandomAdByType('interval');
    if (!ad) return;

    const usersRes = await db.query(`
      SELECT telegram_id FROM users u
      JOIN profiles p ON u.telegram_id = p.telegram_id
      WHERE p.is_banned = false
    `);

    for (const user of usersRes.rows) {
      const chatId = user.telegram_id;
      const opts = {
        parse_mode: 'Markdown',
        disable_web_page_preview: false
      };

      const content = escapeMarkdown(ad.content || '');
      const adText = `üì¢ *–†–µ–∫–ª–∞–º–∞:*\n${content.length > 3900 ? content.slice(0, 3900) + '‚Ä¶' : content}`;

      if (ad.link) {
        opts.reply_markup = {
          inline_keyboard: [[{ text: '–ü–µ—Ä–µ–π—Ç–∏', url: ad.link }]]
        };
      }

      try {
        if (ad.media) {
          const method = ad.media.includes('photo') ? 'sendPhoto'
                      : ad.media.includes('video') ? 'sendVideo'
                      : 'sendAnimation';
          await bot.telegram[method](chatId, ad.media, {
            caption: adText,
            ...opts
          });
        } else {
          await bot.telegram.sendMessage(chatId, adText, opts);
        }

        await logAdView(chatId, ad.id, 'interval');
      } catch (err) {
        if (err.response?.error_code === 403) {
          console.warn(`‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`);
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∫–ª–∞–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}:`, err.message);
        }
      }

      await delay(40); // 25‚Äì30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –¥–æ–ø—É—Å—Ç–∏–º–æ, 40–º—Å ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ
    }

    console.log(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Ä–µ–∫–ª–∞–º—ã "interval" –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è ${usersRes.rowCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ cron-—Ä–µ–∫–ª–∞–º—ã:', err.message);
  }
});
