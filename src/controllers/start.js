import { Markup } from 'telegraf';
import db from '../db.js';
import mainMenuKeyboard from '../keyboards/mainMenu.js';
import { getRandomAdByType } from '../utils/getRandomAdByType.js';
import { escapeMarkdown } from '../utils/escapeMarkdown.js'; // –µ—Å–ª–∏ –µ—Å—Ç—å

const startKeyboard = Markup.keyboard([
  ['üêæ –í–æ–π—Ç–∏', '‚ÑπÔ∏è –û –ë–æ—Ç–µ'],
]).resize();

export default async function handleStart(ctx) {
  const telegramId = ctx.from?.id?.toString();

  if (!telegramId || !ctx.chat || ctx.chat.type !== 'private') {
    return ctx.reply('‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ /start —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ.');
  }

  const chatId = ctx.chat.id;

  try {
    // üî∏ –†–µ–∫–ª–∞–º–∞
    const ad = await getRandomAdByType('entry');
    if (ad) {
      try {
        const opts = {
          parse_mode: 'Markdown',
          disable_web_page_preview: false
        };

        const adText = `üì¢ *–†–µ–∫–ª–∞–º–∞:*\n${escapeMarkdown(ad.content)}`;
        if (ad.link) {
          opts.reply_markup = {
            inline_keyboard: [[{ text: '–ü–µ—Ä–µ–π—Ç–∏', url: ad.link }]]
          };
        }

        if (ad.media) {
          const method = ad.media.includes('photo') ? 'sendPhoto'
                      : ad.media.includes('video') ? 'sendVideo'
                      : 'sendAnimation';
          await ctx.telegram[method](chatId, ad.media, {
            caption: adText,
            ...opts
          });
        } else {
          await ctx.reply(adText, opts);
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∫–ª–∞–º—ã:', err.message);
      }
    }

    // üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const res = await db.query(`
      SELECT telegram_id
      FROM users
      WHERE telegram_id = $1
    `, [telegramId]);

    if (res.rowCount > 0) {
      await ctx.reply(
        `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${escapeMarkdown(ctx.from.first_name)}!`,
        { ...mainMenuKeyboard(ctx.session?.isAdmin), parse_mode: 'Markdown' }
      );
      return ctx.scene.enter('mainMenuScene');
    } else {
      await ctx.replyWithMarkdown(
        `üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n`,
        startKeyboard
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start:', error);
    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}
