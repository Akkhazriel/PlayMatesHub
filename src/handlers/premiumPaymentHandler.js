import db from '../db.js';
import { Markup } from 'telegraf';

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–º–∏—É–º–∞
 * @param {Telegraf} bot
 */
export function registerPremiumPaymentHandlers(bot) {
  // üí≥ –ö–Ω–æ–ø–∫–∞ / –∫–æ–º–∞–Ω–¥–∞: –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
  bot.hears('üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', async (ctx) => {
    try {
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:', Markup.inlineKeyboard([
        [Markup.button.callback('üíé 30 –¥–Ω–µ–π ‚Äî Telegram', 'buy_premium_30')],
        [Markup.button.url('–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –±–∞–Ω–∫', 'https://your-bank-link.com')],
        [Markup.button.url('–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º', 'https://t.me/youradmin')],
      ]));
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã:', err);
    }
  });

  // ‚òëÔ∏è Inline-–∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Payments
  bot.action(/^buy_premium_(\d+)$/, async (ctx) => {
    const days = parseInt(ctx.match[1]);
    const amount = days * 1000; // –ü—Ä–∏–º–µ—Ä: 30 –¥–Ω–µ–π * 1000 –∫–æ–ø–µ–µ–∫ = 300 —Ä—É–±
    const label = `${days} –¥–Ω–µ–π –ø—Ä–µ–º–∏—É–º`;

    try {
      await ctx.answerCbQuery();
      await ctx.replyWithInvoice({
        title: '–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞',
        description: `–î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ ${days} –¥–Ω–µ–π`,
        payload: `premium-${days}-days`,
        provider_token: process.env.PAYMENT_PROVIDER_TOKEN,
        currency: 'RUB',
        prices: [{ label, amount }],
        start_parameter: 'premium-subscription',
        need_name: true,
        need_email: false,
        photo_url: 'https://i.imgur.com/NbKQKDu.png',
        photo_width: 600,
        photo_height: 400
      });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞:', err);
      ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç Telegram
  bot.on('pre_checkout_query', (ctx) => {
    return ctx.answerPreCheckoutQuery(true);
  });

  // üßæ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
  bot.on('successful_payment', async (ctx) => {
    try {
      const telegramId = ctx.from.id.toString();
      const payload = ctx.message.successful_payment.invoice_payload;
      const match = payload.match(/premium-(\d+)-days/);
      const days = match ? parseInt(match[1]) : 30;

      const { rows } = await db.query('SELECT id FROM profiles WHERE telegram_id = $1', [telegramId]);
      const profileId = rows[0]?.id;

      if (!profileId) {
        return ctx.reply('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }

      const now = new Date();
      const newExpiry = new Date(now.getTime() + days * 24 * 60 * 60 * 1000);

      await db.query(`
        INSERT INTO premium (profile_id, expires_at)
        VALUES ($1, $2)
        ON CONFLICT (profile_id) DO UPDATE SET expires_at = $2
      `, [profileId, newExpiry]);

      await ctx.reply(`üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\nüíé –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ ${newExpiry.toLocaleDateString()}`);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã:', err);
      ctx.reply('‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.');
    }
  });
}
