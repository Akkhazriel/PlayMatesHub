import dotenv from 'dotenv';
import { Telegraf, Scenes, session } from 'telegraf';
import cron from 'node-cron';
import sendEntryAd from './cron/entryAdCron.js';
import expirePremiumCheck from './cron/expirePremiumCheck.js';
import db from './db.js';



import roleMiddleware from './middleware/roleMiddleware.js';
import isRegisteredMiddleware from './middleware/isRegisteredMiddleware.js';
import handleStart from './controllers/start.js';
import mainMenuScene from './scenes/mainMenuScene.js';
import registrationScene from './scenes/registrationScene.js';
import searchWizardScene from './scenes/searchWizardScene.js';
import reportScene from './scenes/reportScene.js';
import profileScene from './scenes/profileScene.js';
import editProfileWizardScene from './scenes/editProfileWizardScene.js';
import editGamesScene from './scenes/editGamesScene.js';
import matchListScene from './scenes/matchListScene.js';
import likedByScene from './scenes/likedByScene.js';
import likedToScene from './scenes/likedToScene.js';
import premiumScene from './scenes/premiumScene.js';
import { registerPremiumPaymentHandlers } from './handlers/premiumPaymentHandler.js';
import handleHelp from './controllers/help.js';
import mainMenuKeyboard from './keyboards/mainMenu.js';
import deleteExpiredMatches from './cron/deleteExpiredMatches.js';
import adminPanelScene from './scenes/adminPanelScene.js';
import adminGamesScene from './scenes/adminGamesScene.js';
import adminRanksScene from './scenes/adminRanksScene.js';
import adminPremiumScene from './scenes/adminPremiumScene.js';
import adminBroadcastScene from './scenes/adminBroadcastScene.js';
import adminStatsScene from './scenes/adminStatsScene.js';
import adminBlockScene from './scenes/adminBlockScene.js';
import adminAdsScene from './scenes/adminAdsScene.js';
import linkSteamScene from './scenes/linkSteamScene.js';
import banCheck from './middleware/banCheck.js';
import premiumMiddleware from './middleware/premiumMiddleware.js';
import setProfileIdMiddleware from './middleware/setProfileIdMiddleware.js';
import './cron/adsCron.js';
import updateSteamStats from './cron/updateSteamStats.js';
import unbanExpiredUsers from './cron/unbanExpiredUsers.js';
import { logToAdmin } from './utils/logToAdmin.js';


const bot = new Telegraf(process.env.BOT_TOKEN);

const stage = new Scenes.Stage([
  mainMenuScene,
  registrationScene,
  searchWizardScene,
  reportScene,
  profileScene,
  editProfileWizardScene,
  editGamesScene,
  matchListScene,
  likedByScene,
  likedToScene,
  premiumScene,
  adminPanelScene,
  adminGamesScene,
  adminRanksScene,
  adminPremiumScene,
  adminBroadcastScene,
  adminStatsScene,
  adminBlockScene,
  adminAdsScene,
  linkSteamScene
  // –¥—Ä—É–≥–∏–µ —Å—Ü–µ–Ω—ã
]);

registerPremiumPaymentHandlers(bot);
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
expirePremiumCheck();

bot.use(session());
bot.use(premiumMiddleware);         // —Å–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isPremium
bot.use(stage.middleware());        // —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º ‚Äî —Å—Ü–µ–Ω—ã
bot.use(roleMiddleware);
bot.use(isRegisteredMiddleware);
bot.use(banCheck);
bot.use(setProfileIdMiddleware);


bot.start(handleStart);
bot.command('start', async (ctx) => {
  if (ctx.scene?.current) await ctx.scene.leave();
  return handleStart(ctx);
});

bot.hears('üêæ –í–æ–π—Ç–∏', async (ctx) => {
  await ctx.replyWithMarkdown(
    `–î–ª—è —Å—Ç–∞—Ä—Ç–∞ - –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä—ã.\n
    ‚û°Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n`
  );

  return ctx.scene.enter('registrationScene');
});

bot.hears('üîç –ü–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤', async (ctx) => {
  try {
    await ctx.deleteMessage(); // —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–æ —Å—Ü–µ–Ω–µ
  } catch (e) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e);
    // –∏–Ω–æ–≥–¥–∞ Telegram –Ω–µ –¥–∞—ë—Ç —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —ç—Ç–æ –Ω–æ—Ä–º
  }
  await ctx.scene.enter('searchWizardScene');
});



bot.hears('‚ÑπÔ∏è –û –ë–æ—Ç–µ', (ctx) => ctx.reply(
  `üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PlayerHub!\n\n` +
  `–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤ –∏ —Å–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ–Ω–ª–∞–π–Ω-–∏–≥—Ä.\n\n` +
  `üë• –û–±—â–∞–π—Å—è, –Ω–∞—Ö–æ–¥–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤, —Ñ–æ—Ä–º–∏—Ä—É–π –ø–∞—Ç–∏ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º —Ç–µ–±—è –∏–≥—Ä–∞–º.\n` +
  `üèÖ –í—ã–±–∏—Ä–∞–π –∏–≥—Ä—ã, —É–∫–∞–∑—ã–≤–∞–π —Ä–∞–Ω–≥–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–π –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–∏–º–º–µ–π—Ç–æ–≤.\n` +
  `üíé –û—Ñ–æ—Ä–º–∏ –ø—Ä–µ–º–∏—É–º, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: –±–æ–ª—å—à–µ –∏–≥—Ä –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫, –≤–∫–ª–∞–¥–∫–∏ –ª–∞–π–∫–æ–≤, —É—á–∞—Å—Ç–∏–µ –≤ –∏–≤–µ–Ω—Ç–∞—Ö –∏ —Ç—É—Ä–Ω–∏—Ä–∞—Ö.\n\n` +
  `üöÄ –ù–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å —É–∂–µ —Å–µ–π—á–∞—Å ‚Äî –≤—ã–±–∏—Ä–∞–π –∏–≥—Ä—ã –∏ –∏—â–∏ —Ç–∏–º–º–µ–π—Ç–æ–≤!\n`
));

bot.command('profile', (ctx) => ctx.scene.enter('profileScene'));
bot.hears('üë§ –ü—Ä–æ—Ñ–∏–ª—å', (ctx) => ctx.scene.enter('profileScene'));

bot.hears('üíé –ü—Ä–µ–º–∏—É–º', (ctx) => ctx.scene.enter('premiumScene'));


bot.command('menu', (ctx) => ctx.scene.enter('mainMenuScene'));

bot.command('help', handleHelp);
bot.hears('‚ùì –ü–æ–º–æ—â—å', handleHelp);

// –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.hears('‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', (ctx) => {
  const isAdmin = ctx.session?.isAdmin || false;
  return ctx.reply('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainMenuKeyboard(isAdmin));
});

function setupCronJobs() {
  const timezone = 'Europe/Moscow';
  // –†–∞–∑ –≤ 12 —á–∞—Å–æ–≤
  cron.schedule('0 */12 * * *', () => {
    console.log('[CRON] –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º–∞');
    expirePremiumCheck();
  }, { timezone });

  // –ó–∞–¥–∞—á–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 14:00, –ø–æ–∫–∞–∑ —Ä–µ–∫–ª–∞–º—ã entry
  cron.schedule('0 14 * * *', () => {
    sendEntryAd();
  }, { timezone });

  // –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Steam –≤ 4:00 —É—Ç—Ä–∞ –ø–æ —Å–µ—Ä–≤–µ—Ä—É
  cron.schedule('0 4 * * *', async () => {
    console.log('[CRON] –ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Steam —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    await updateSteamStats();
  }, { timezone });

  cron.schedule('0 */3 * * *', async () => {
    console.log('‚è∞ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–Ω–ª–∞–π–Ω-—á–∏—Å–ª–∞');

    try {
      const res = await db.query('SELECT telegram_id FROM users');
      const userIds = res.rows.map(r => r.telegram_id);

      const profilesRes = await db.query('SELECT COUNT(*) FROM profiles');
      const totalProfiles = parseInt(profilesRes.rows[0].count, 10);

      const maxOnline = Math.floor(totalProfiles * 0.65);
      const randomOnline = Math.floor(Math.random() * maxOnline) + 1;

      for (const userId of userIds) {
        try {
          await bot.telegram.sendMessage(userId, `üî• –¢–µ–∫—É—â–∏–π –æ–Ω–ª–∞–π–Ω: ${randomOnline} –∏–≥—Ä–æ–∫–æ–≤`);
        } catch (err) {
          if (err.code === 403 || (err.response && err.response.error_code === 403)) {
            console.warn(`‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`);
          } else {
            console.error(`‚ùó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, err);
            if (typeof logToAdmin === 'function') {
              await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: ${err.message}`);
            }
          }
        }
      }

      console.log('‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    } catch (err) {
      console.error('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', err);
      if (typeof logToAdmin === 'function') {
        await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: ${err.message}`);
      }
    }
  }, { timezone });

  cron.schedule('0 3 * * *', deleteExpiredMatches, { timezone });
  cron.schedule('0 3 * * *', unbanExpiredUsers, { timezone });
}

async function init() {
  try {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è cron-–∑–∞–¥–∞—á...');
    setupCronJobs();

    console.log('üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–≤–∏—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–æ–≤...');
    await expirePremiumCheck();

    console.log('üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Steam —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    await updateSteamStats();

    await bot.launch();
    console.log('üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');

    // Graceful shutdown
    process.once('SIGINT', () => bot.stop('SIGINT'));
    process.once('SIGTERM', () => bot.stop('SIGTERM'));

  } catch (error) {
    console.error('‚ùó –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    if (typeof logToAdmin === 'function') {
      await logToAdmin(`‚ùó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    }
    process.exit(1);
  }
}

init();
export default bot;