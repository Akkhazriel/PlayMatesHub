import db from '../db.js';

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∏–≥—Ä–∞.
 * @param {string} name
 * @param {boolean} hasRank
 * @param {Telegraf} bot
 * @returns {Promise<number>} ID –Ω–æ–≤–æ–π –∏–≥—Ä—ã
 */
export async function addGame(name, hasRank, bot) {
  const existing = await db.query('SELECT COUNT(*) FROM games');
  const isFirstGame = parseInt(existing.rows[0].count) === 0;

  const res = await db.query(
    'INSERT INTO games (name, has_rank) VALUES ($1, $2) RETURNING id',
    [name, hasRank]
  );

  const newGameId = res.rows[0].id;

  if (isFirstGame) {
    const profiles = await db.query(`
      SELECT p.id, u.telegram_id
      FROM profiles p
      JOIN users u ON u.telegram_id = p.telegram_id
      LEFT JOIN profile_games pg ON pg.profile_id = p.id
      WHERE pg.id IS NULL
    `);

    for (const profile of profiles.rows) {
      await db.query(
        'INSERT INTO profile_games (profile_id, game_id, rank_id) VALUES ($1, $2, $3)',
        [profile.id, newGameId, null]
      );

      try {
        await bot.telegram.sendMessage(
          profile.telegram_id,
          `üéÆ –í–∞–º –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–≥—Ä–∞ *${name}* –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞.\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.`,
          { parse_mode: 'Markdown' }
        );
      } catch (e) {
        console.warn(`‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${profile.telegram_id}`);
      }
    }
  }

  return newGameId;
}
