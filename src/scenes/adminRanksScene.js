import { Scenes, Markup } from 'telegraf';
import {
  getGamesWithRanks,
  getRanksByGame,
  createRank,
  updateRank,
  deleteRank,
  moveRank
} from '../services/rank.service.js';
import { isCallbackHandled } from '../utils/callbackGuard.js';
import { escapeMarkdown } from '../utils/escapeMarkdown.js';


const adminRanksScene = new Scenes.WizardScene('adminRanksScene',

    // STEP 0 ‚Äî –≤—ã–±–æ—Ä –∏–≥—Ä—ã
    async (ctx) => {
        const games = await getGamesWithRanks();
        if (!games.length) {
            await ctx.reply('‚ùå –ù–µ—Ç –∏–≥—Ä —Å —Ä–∞–Ω–≥–∞–º–∏.');
            return ctx.scene.enter('adminPanelScene'); // –∏–ª–∏ ctx.scene.leave()
        }

        const buttons = games.map((g) =>
            [Markup.button.callback(g.name, `select_game_${g.id}`)]
        );
        buttons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_admin')]);

        await ctx.reply('üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞–º–∏:', Markup.inlineKeyboard(buttons));
        return ctx.wizard.selectStep(0); // ‚úÖ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π return
    },

    // STEP 1 ‚Äî —Å–ø–∏—Å–æ–∫ —Ä–∞–Ω–≥–æ–≤
    async () => { }
);

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞–Ω–≥–æ–≤
async function renderRanksUI(ctx, gameId) {
    const ranks = await getRanksByGame(gameId);
    const list = ranks.length
        ? ranks.map((r, i) => `${i + 1}. ${escapeMarkdown(r.name)}`).join('\n')
        : '‚ùå –ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞–Ω–≥–æ–≤';


    const buttons = ranks.map((r, i) => {
        const controls = [];
        if (i > 0) controls.push(Markup.button.callback('‚¨ÜÔ∏è', `rank_up_${r.id}`));
        if (i < ranks.length - 1) controls.push(Markup.button.callback('‚¨áÔ∏è', `rank_down_${r.id}`));
        controls.push(Markup.button.callback('‚úè', `rank_edit_${r.id}`));
        controls.push(Markup.button.callback('‚ùå', `rank_delete_${r.id}`));
        return controls;
    });

    buttons.push([Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–Ω–≥', 'rank_add')]);
    buttons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º', 'back_to_games')]);

    await ctx.replyWithMarkdown(`üè∑ *–†–∞–Ω–≥–∏:*\n\n${list}`, Markup.inlineKeyboard(buttons));
    return ctx.wizard.selectStep(1); // ‚úÖ –≤–∞–∂–µ–Ω –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
}

// SELECT GAME
adminRanksScene.action(/^select_game_(\d+)$/, async (ctx) => {
    if (isCallbackHandled(ctx)) return;
    await ctx.answerCbQuery();

    const gameId = parseInt(ctx.match[1], 10);
    ctx.wizard.state.selectedGameId = gameId;

    return renderRanksUI(ctx, gameId);
});

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–Ω–≥
adminRanksScene.action('rank_add', async (ctx) => {
    if (isCallbackHandled(ctx)) return;
    await ctx.answerCbQuery();
    await ctx.reply('‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–Ω–≥–∞:');
    return ctx.wizard.selectStep(2);
});

// ‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
adminRanksScene.action(/^rank_edit_(\d+)$/, async (ctx) => {
    if (isCallbackHandled(ctx)) return;
    await ctx.answerCbQuery();

    ctx.wizard.state.editingRankId = parseInt(ctx.match[1], 10);
    await ctx.reply('‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–Ω–≥–∞:');
    return ctx.wizard.selectStep(3);
});

// ‚ùå –£–¥–∞–ª–∏—Ç—å
adminRanksScene.action(/^rank_delete_(\d+)$/, async (ctx) => {
    if (isCallbackHandled(ctx)) return;
    await ctx.answerCbQuery();

    const id = parseInt(ctx.match[1], 10);
    await deleteRank(id);
    return renderRanksUI(ctx, ctx.wizard.state.selectedGameId);
});

// ‚¨Ü‚¨á –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å
adminRanksScene.action(/^rank_(up|down)_(\d+)$/, async (ctx) => {
    if (isCallbackHandled(ctx)) return;
    await ctx.answerCbQuery();

    const [_, dir, id] = ctx.match;
    await moveRank(parseInt(id, 10), dir === 'up' ? -1 : 1);
    return renderRanksUI(ctx, ctx.wizard.state.selectedGameId);
});

adminRanksScene.action('back_to_games', async (ctx) => {
    await ctx.answerCbQuery(); // –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å Telegram-–±–æ—Ç—É, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞

    ctx.wizard.selectStep(0);        // —Å–º–µ–Ω–∏—Ç—å —à–∞–≥ –≤—Ä—É—á–Ω—É—é
    return ctx.wizard.steps[0](ctx); // –≤—ã–∑–≤–∞—Ç—å —à–∞–≥ 0 –Ω–∞–ø—Ä—è–º—É—é
});



// –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É
adminRanksScene.action('back_to_admin', async (ctx) => {
    if (isCallbackHandled(ctx)) return;
    return ctx.scene.enter('adminPanelScene');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞: —Å–æ–∑–¥–∞–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
adminRanksScene.on('text', async (ctx, next) => {
    const step = ctx.wizard.cursor;
    const gameId = ctx.wizard.state.selectedGameId;
    const name = ctx.message.text.trim();

    if (!name) return ctx.reply('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');

    if (step === 2) {
        await createRank(gameId, name);
        return renderRanksUI(ctx, gameId);
    }

    if (step === 3) {
        const id = ctx.wizard.state.editingRankId;
        await updateRank(id, name);
        return renderRanksUI(ctx, gameId);
    }

    return next();
});

export default adminRanksScene;