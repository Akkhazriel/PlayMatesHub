import { Scenes, Markup } from 'telegraf';
import {
  saveAd,
  getAdsList,
  removeAd,
  switchAdStatus
} from '../services/ads.service.js';

import {
  buildAdPreview,
  buildAdTypeLabel
} from '../utils/adFormatter.js';

import {
  mainKeyboard,
  buildAdTypeButtons
} from '../keyboards/adminAds.js';

import { validateUrl } from '../utils/validators.js';
import { isCallbackHandled } from '../utils/callbackGuard.js';

import { logScene } from '../scenes/sceneLogger.js';

const adminAdsScene = new Scenes.WizardScene(
  'adminAdsScene',

  // –®–∞–≥ 0: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  async (ctx) => {
    logScene('adminAdsScene', '–°—Ü–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –∞–¥–º–∏–Ω–æ–º.');
    if (ctx.session.isProcessing) return;
    ctx.session.isProcessing = true;
    try {
      if (!ctx.session.isAdmin) {
        await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
        return;
      }
      ctx.session.adDraft = {};
      await ctx.reply('üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–π:', mainKeyboard());
      return ctx.wizard.next();
    } finally {
      ctx.session.isProcessing = false;
    }
  },

  // –®–∞–≥ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
  async (ctx) => {
    if (ctx.session.isProcessing) return;
    ctx.session.isProcessing = true;
    try {
      const input = ctx.message?.text;
      console.log('[adminAdsScene] –ü–æ–ª—É—á–µ–Ω–æ:', input);

      if (!input) {
        return ctx.wizard.selectStep(1);
      }

      if (input === '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é') {
        console.log('[adminAdsScene] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É 2 (–≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞)');
        ctx.wizard.state.editingAd = null;
        await ctx.reply('‚úç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:');
        return ctx.wizard.selectStep(2);
      }

      if (input === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥') {
        await ctx.scene.enter('adminPanelScene');
        return;
      }

      if (['üìÇ –í—Å–µ', 'üë£ Entry', 'üîç Search', '‚è± Interval'].includes(input)) {
        let type = null;
        if (input === 'üë£ Entry') type = 'entry';
        if (input === 'üîç Search') type = 'search';
        if (input === '‚è± Interval') type = 'interval';

        const ads = await getAdsList(type);
        if (ads.length === 0) {
          await ctx.reply('‚ùóÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
        } else {
          for (const ad of ads) {
            await ctx.reply(buildAdPreview(ad), {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: '‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: `edit_ad_${ad.id}` }],
                  [{ text: ad.active ? 'üö´ –í—ã–∫–ª—é—á–∏—Ç—å' : '‚úÖ –í–∫–ª—é—á–∏—Ç—å', callback_data: `toggle_ad_${ad.id}` }],
                  [{ text: 'üóë –£–¥–∞–ª–∏—Ç—å', callback_data: `delete_ad_${ad.id}` }],
                ]
              }
            });
          }
        }

        return ctx.wizard.selectStep(1);
      }

      await ctx.reply('‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.');
      return ctx.wizard.selectStep(1);
    } finally {
      ctx.session.isProcessing = false;
    }
  },

  // –®–∞–≥ 2: –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
  async (ctx) => {
    if (ctx.session.isProcessing) return;
    ctx.session.isProcessing = true;
    try {
      const input = ctx.message?.text;
      if (!input) {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è.');
        return;
      }

      ctx.session.adDraft.content = input;
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', adTypeKeyboard());
      return ctx.wizard.selectStep(3);
    } finally {
      ctx.session.isProcessing = false;
    }
  },

  // –®–∞–≥ 3: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  async (ctx) => {
    if (ctx.session.isProcessing) return;
    ctx.session.isProcessing = true;
    try {
      if (!ctx.session.adDraft) {
        await ctx.reply('‚ùóÔ∏è –î–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –Ω–∞—á–∞–ª–æ.');
        return;
      }

      const input = ctx.message?.text;
      if (!input) {
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è.');
        return;
      }

      if (!['üë£ Entry', 'üîç Search', '‚è± Interval'].includes(input)) {
        await ctx.reply('‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.');
        return;
      }

      if (input === 'üë£ Entry') ctx.session.adDraft.type = 'entry';
      if (input === 'üîç Search') ctx.session.adDraft.type = 'search';
      if (input === '‚è± Interval') ctx.session.adDraft.type = 'interval';

      await ctx.reply('–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å–µ–π—á–∞—Å. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-"');
      return ctx.wizard.selectStep(4);
    } finally {
      ctx.session.isProcessing = false;
    }
  },

  // –®–∞–≥ 4: –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞
  async (ctx) => {
    if (ctx.session.isProcessing) return;
    ctx.session.isProcessing = true;
    try {
      const fileId = ctx.message?.photo?.pop()?.file_id ||
        ctx.message?.document?.file_id ||
        ctx.message?.video?.file_id ||
        ctx.message?.animation?.file_id;

      if (fileId) {
        ctx.session.adDraft.media = fileId;
        await ctx.reply('–ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É (–∏–ª–∏ "-" –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):');
        return ctx.wizard.selectStep(5);
      }

      const input = ctx.message?.text;
      if (!input) {
        await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.');
        return;
      }

      if (input === '-') {
        await ctx.reply('–ú–µ–¥–∏–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É (–∏–ª–∏ "-" –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):');
        return ctx.wizard.selectStep(5);
      }

      await ctx.reply('‚ùóÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ "-"');
      return ctx.wizard.selectStep(4);
    } finally {
      ctx.session.isProcessing = false;
    }
  },


  // –®–∞–≥ 5: –°—Å—ã–ª–∫–∞
  async (ctx) => {
    if (ctx.session.isProcessing) return;
    ctx.session.isProcessing = true;
    try {
      const input = ctx.message?.text;
      if (!input) {
        await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É (–∏–ª–∏ "-" –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):');
        return;
      }

      if (input === '-') {
        ctx.session.adDraft.link = null;
      } else if (!validateUrl(input)) {
        await ctx.reply('‚ùóÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.');
        return;
      } else {
        ctx.session.adDraft.link = input;
      }

      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø–æ–∫–∞–∑–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö, –æ—Ç 1 –¥–æ 1440):');
      return ctx.wizard.selectStep(6);
    } finally {
      ctx.session.isProcessing = false;
    }
  },

  // –®–∞–≥ 6: –ß–∞—Å—Ç–æ—Ç–∞
  async (ctx) => {
    if (ctx.session.isProcessing) return;
    ctx.session.isProcessing = true;
    try {
      const input = ctx.message?.text;
      const freq = parseInt(input);
      if (isNaN(freq) || freq < 1 || freq > 1440) {
        await ctx.reply('‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1440.');
        return;
      }

      ctx.session.adDraft.frequency = freq;
      await ctx.reply(buildAdPreview(ctx.session.adDraft), {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data: 'ad_save' }],
            [{ text: '‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'ad_edit' }],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'ad_cancel' }]
          ]
        }
      });

      return ctx.wizard.selectStep(7);
    } finally {
      ctx.session.isProcessing = false;
    }
  },


  // –®–∞–≥ 7: –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
  async (ctx) => {
    if (ctx.session.isProcessing) return;
    ctx.session.isProcessing = true;
    try {
      await ctx.reply(buildAdPreview(ctx.session.adDraft), {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data: 'ad_save' }],
            [{ text: '‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'ad_edit' }],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'ad_cancel' }]
          ]
        }
      });

      return ctx.wizard.selectStep(7);
    } finally {
      ctx.session.isProcessing = false;
    }
  },

);

// ==== ACTIONS ====

adminAdsScene.action(/^ad_type_(entry|search|interval)$/, async (ctx) => {
  if (isCallbackHandled(ctx)) return;
  const type = ctx.match[1];
  ctx.session.adDraft.type = type;
  await ctx.answerCbQuery();
  try { await ctx.editMessageReplyMarkup(); } catch { }
  await ctx.reply('üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç":');
  return ctx.wizard.selectStep(4);
});

adminAdsScene.action('ad_save', async (ctx) => {
  if (isCallbackHandled(ctx)) return;
  await ctx.answerCbQuery();
  const ad = ctx.session.adDraft;

  if (!ad || !ad.content || !ad.type || !ad.frequency) {
    return ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –û—Ç–º–µ–Ω–∞.');
  }

  try {
    await saveAd(ad); // <== —Ç–µ–ø–µ—Ä—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    ctx.session.adDraft = null;
    ctx.wizard.state.editingAd = null;
    try { await ctx.deleteMessage(); } catch { }
    await ctx.reply('‚úÖ –†–µ–∫–ª–∞–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.');
    return ctx.wizard.selectStep(0);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã:', err);
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.');
  }
});

adminAdsScene.action('ad_edit', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:');
  return ctx.wizard.selectStep(2);
});

adminAdsScene.action('ad_cancel', async (ctx) => {
  if (isCallbackHandled(ctx)) return;
  await ctx.answerCbQuery('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ');
  ctx.session.adDraft = null;
  try { await ctx.editMessageText('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.'); } catch { }
  return ctx.wizard.selectStep(0);
});

adminAdsScene.action(/^ad_delete_(\d+)$/, async (ctx) => {
  if (isCallbackHandled(ctx)) return;
  const id = parseInt(ctx.match[1], 10);
  try {
    await removeAd(id);
    await ctx.answerCbQuery();
    await ctx.editMessageText(`üóë –†–µ–∫–ª–∞–º–∞ ID ${id} —É–¥–∞–ª–µ–Ω–∞.`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã:', err);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.');
  }
});

adminAdsScene.action(/^ad_toggle_(\d+)$/, async (ctx) => {
  if (isCallbackHandled(ctx)) return;
  const id = parseInt(ctx.match[1], 10);
  try {
    const active = await switchAdStatus(id);
    await ctx.answerCbQuery();
    await ctx.editMessageText(`üîÑ –†–µ–∫–ª–∞–º–∞ ID ${id} —Ç–µ–ø–µ—Ä—å ${active ? '‚úÖ –∞–∫—Ç–∏–≤–Ω–∞' : 'üö´ –æ—Ç–∫–ª—é—á–µ–Ω–∞'}.`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:', err);
    await ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å.');
  }
});

adminAdsScene.action(/^edit_ad_(\d+)$/, async (ctx) => {
  if (isCallbackHandled(ctx)) return;
  const id = parseInt(ctx.match[1], 10);
  await ctx.answerCbQuery();

  const ads = await getAdsList(); // –ø–æ–ª—É—á–∏–º –≤—Å–µ —Ä–µ–∫–ª–∞–º—ã
  const ad = ads.find(a => a.id === id);
  if (!ad) {
    return ctx.reply('‚ùå –†–µ–∫–ª–∞–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
  }

  ctx.session.adDraft = { ...ad };
  ctx.wizard.state.editingAd = id;

  try { await ctx.deleteMessage(); } catch { }

  await ctx.reply('‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã:');
  return ctx.wizard.selectStep(2); // –ø–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
});

export default adminAdsScene;