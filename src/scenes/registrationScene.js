import { Scenes, Markup } from 'telegraf';
import db from '../db.js';
import { validateName, validateAge, validateBio } from '../utils/validators.js';
import mainMenuKeyboard from '../keyboards/mainMenu.js';
import { isCallbackHandled } from '../utils/callbackGuard.js';
import { escapeMarkdown } from '../utils/escapeMarkdown.js';
import { logToAdmin } from '../utils/logToAdmin.js';


const registrationScene = new Scenes.WizardScene(
  'registrationScene',

  // üîπ –®–∞–≥ 0: –ò–º—è
  async (ctx) => {
    try {
      await ctx.reply('–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è: ', Markup.removeKeyboard());
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—à–∞–≥ 0):', err);
      await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—à–∞–≥ 0): ${err.message}`);
    }
    return ctx.wizard.next();
  },

  // üîπ –®–∞–≥ 1: –í–æ–∑—Ä–∞—Å—Ç
  async (ctx) => {
    const text = ctx.message?.text;

    if (!validateName(text)) {
      return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
    }

    ctx.wizard.state.name = text.trim();

    try {
      await ctx.reply('–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: ', Markup.keyboard([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']]).resize());
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—à–∞–≥ 1):', err);
      await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—à–∞–≥ 1): ${err.message}`);
    }
    return ctx.wizard.next();
  },

  // üîπ –®–∞–≥ 2: –í—ã–±–æ—Ä –ø–æ–ª–∞
  async (ctx) => {
    const text = ctx.message?.text;

    if (text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥') {
      return ctx.wizard.selectStep(0);
    }

    const age = parseInt(text, 10);
    if (!validateAge(age)) {
      return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.');
    }

    ctx.wizard.state.age = age;

    try {
      await ctx.reply(`–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª: `, Markup.inlineKeyboard([
        [Markup.button.callback('üë® –ú—É–∂—Å–∫–æ–π', 'gender_male')],
        [Markup.button.callback('üë© –ñ–µ–Ω—Å–∫–∏–π', 'gender_female')],
        [Markup.button.callback('‚ùì –ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å', 'gender_unspecified')],
      ]));
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—à–∞–≥ 2):', err);
      await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—à–∞–≥ 2): ${err.message}`);
    }

    return ctx.wizard.next();
  },

  // üîπ –®–∞–≥ 3: –í–≤–æ–¥ –±–∏–æ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä
  async (ctx) => {
    const text = ctx.message?.text;

    if (text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥') {
      await ctx.reply('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:', Markup.inlineKeyboard([
        [Markup.button.callback('üë® –ú—É–∂—Å–∫–æ–π', 'gender_male')],
        [Markup.button.callback('üë© –ñ–µ–Ω—Å–∫–∏–π', 'gender_female')],
        [Markup.button.callback('‚ùì –ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å', 'gender_unspecified')],
      ]));
      return ctx.wizard.selectStep(2);
    }

    if (!validateBio(text)) {
      try {
        return ctx.reply('–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ù–∞–ø–∏—à–∏ –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤.');
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', err);
        await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ—Ç –∏–≥—Ä): ${err.message}`);
      }
    }

    ctx.wizard.state.bio = text.trim();

    let games = [];
    try {
      const result = await db.query('SELECT * FROM games ORDER BY name ASC');
      games = result.rows;
    } catch (err) {
      console.error('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä:', err);
      await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä: ${err.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return ctx.scene.enter('mainMenuScene');
    }


    if (games.length === 0) {
      const telegramId = ctx.from.id.toString();
      const username = ctx.from.username;

      try {
          const userCheck = await db.query('SELECT 1 FROM users WHERE telegram_id = $1', [telegramId]);
          if (userCheck.rows.length === 0) {
              await db.query('INSERT INTO users (telegram_id, username) VALUES ($1, $2)', [telegramId, username]);
          }
      } catch (err) {
          console.error('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–≤—Å—Ç–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
          await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–≤—Å—Ç–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err.message}`);
          await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          return ctx.scene.enter('mainMenuScene');
      }

      try {
        await db.query(
          'INSERT INTO profiles (telegram_id, name, age, gender, bio) VALUES ($1, $2, $3, $4, $5)',
          [telegramId, ctx.wizard.state.name, ctx.wizard.state.age, ctx.wizard.state.gender, ctx.wizard.state.bio]
        );
      } catch (err) {
        console.error('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è (–Ω–µ—Ç –∏–≥—Ä):', err);
        await ctx.reply('‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return ctx.scene.enter('mainMenuScene');
      }

      try {
        await ctx.reply('‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –ø–æ–∫–∞ –ø—É—Å—Ç. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∏–≥—Ä—ã –ø–æ—è–≤—è—Ç—Å—è, –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.');
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', err);
        await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (main menu): ${err.message}`);
      }

      try {
        await ctx.reply('üß≠ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω–æ –ø–æ–∏—Å–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.', mainMenuKeyboard(false));

      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', err);
        await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (main menu): ${err.message}`);
      }

      return ctx.scene.enter('mainMenuScene');
    }

    ctx.wizard.state.availableGames = games;
    ctx.wizard.state.selectedGames = [];

    await sendGameSelection(ctx, 0); // –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    return ctx.wizard.next(); // —à–∞–≥ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä
  },

  // üîπ –®–∞–≥ 4: –ò–≥—Ä—ã
  async (ctx) => {
    try {
      return await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.');
    } catch (err) {
      if (err.code === 403) {
        console.warn(`[WARN] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`);
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', err);
      }
    }
  },


  // üîπ –®–∞–≥ 5: –†–∞–Ω–≥–∏
  async (ctx) => {
    return ctx.reply('–û–∂–∏–¥–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä —Ä–∞–Ω–≥–æ–≤...');
  },

  // üîπ –®–∞–≥ 6: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
  async (ctx) => {
    const { name, age, gender, bio, selectedGames, selectedRanks } = ctx.wizard.state;
    const telegramId = ctx.from.id.toString();
    const username = ctx.from.username;

    if (ctx.session.isProcessing) return;
    ctx.session.isProcessing = true;

    try {
        const userCheck = await db.query('SELECT 1 FROM users WHERE telegram_id = $1', [telegramId]);
        if (userCheck.rows.length === 0) {
            await db.query('INSERT INTO users (telegram_id, username) VALUES ($1, $2)', [telegramId, username]);
        }
    } catch (err) {
        console.error('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–≤—Å—Ç–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—à–∞–≥ 6):', err);
        await ctx.reply('‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return ctx.scene.enter('mainMenuScene');
    }

    let profileId;
    try {
      const profileRes = await db.query(
        'INSERT INTO profiles (telegram_id, name, age, gender, bio) VALUES ($1, $2, $3, $4, $5) RETURNING id',
        [telegramId, name, age, gender, bio]
      );
      if (profileRes.rows.length === 0) {
        console.error('‚ùó –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª id');
        await ctx.reply('‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return ctx.scene.enter('mainMenuScene');
      }
      profileId = profileRes.rows[0].id;
    } catch (err) {
      console.error('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', err);
      await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${err.message}`);
      await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è (registrationScene): ${err.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return ctx.scene.enter('mainMenuScene');
    }


    for (const gameId of selectedGames) {
      const rankId = selectedRanks[gameId] || null;
      try {
        await db.query(
          'INSERT INTO profile_games (profile_id, game_id, rank_id) VALUES ($1, $2, $3)',
          [profileId, gameId, rankId]
        );
      } catch (err) {
        console.error(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∏–≥—Ä—ã (gameId: ${gameId}):`, err);
        await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return ctx.scene.enter('mainMenuScene');
      }
    }


    await ctx.reply('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–æ–∂–µ—à—å –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –ø–æ–∏—Å–∫—É.', mainMenuKeyboard(false));
    return ctx.scene.enter('mainMenuScene');
  }
);

// üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
registrationScene.action(/^gender_(male|female|unspecified)$/, async (ctx) => {
  if (isCallbackHandled(ctx)) return;
  const gender = ctx.match[1];
  ctx.wizard.state.gender = gender;

  await ctx.answerCbQuery();
  await ctx.reply('–ù–∞–ø–∏—à–∏ –æ —Å–µ–±–µ: ', Markup.keyboard([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']]).resize());
  return ctx.wizard.selectStep(3);
});

// üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä
registrationScene.action(/^game_(\d+)_(\d+)$/, async (ctx) => {
  if (isCallbackHandled(ctx)) return;
  const gameId = parseInt(ctx.match[1]);
  const page = parseInt(ctx.match[2]);
  const { selectedGames } = ctx.wizard.state;
  const isPremium = false; // TODO: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –ë–î

  const idx = selectedGames.indexOf(gameId);
  if (idx === -1) {
    if (selectedGames.length >= (isPremium ? 6 : 3)) {
      return ctx.answerCbQuery('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - 3 –∏–≥—Ä—ã.');
    }
    selectedGames.push(gameId);
  } else {
    selectedGames.splice(idx, 1);
  }

  try {
    await ctx.editMessageReplyMarkup(Markup.inlineKeyboard([])); // –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—É—é
  } catch (err) {
    console.error('[game handler] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ replyMarkup:', err);
  }

  await sendGameSelection(ctx, page);
  return ctx.answerCbQuery();
});

// üìå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä
registrationScene.action('game_done', async (ctx) => {
  if (isCallbackHandled(ctx)) return;
  const { availableGames, selectedGames } = ctx.wizard.state;

  const selectedGameObjects = availableGames.filter((g) => selectedGames.includes(g.id));
  const gamesWithRank = selectedGameObjects.filter((g) => g.has_rank);

  ctx.wizard.state.gamesWithRank = gamesWithRank;
  ctx.wizard.state.selectedRanks = {};

  return askNextRank(ctx);
});

// üìå –í—ã–±–æ—Ä —Ä–∞–Ω–≥–∞
registrationScene.action(/^rank_\d+_(\d+|null)$/, async (ctx) => {
  if (isCallbackHandled(ctx)) return;
  const [_, gameIdStr, rankIdStr] = ctx.match[0].split('_');
  const gameId = parseInt(gameIdStr);
  const rankId = rankIdStr === 'null' ? null : parseInt(rankIdStr);

  ctx.wizard.state.selectedRanks[gameId] = rankId;
  return askNextRank(ctx);
});

// üîÅ Helper: –†–∞–Ω–≥–∏
async function askNextRank(ctx) {
  const game = ctx.wizard.state.gamesWithRank.shift();

  if (!game) {
    // ‚úÖ –í—Å–µ –∏–≥—Ä—ã —Å —Ä–∞–Ω–≥–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const { name, age, gender, bio, selectedGames, selectedRanks } = ctx.wizard.state;
    const telegramId = ctx.from.id.toString();
    const username = ctx.from.username;

    if (ctx.session.isProcessing) return;
    ctx.session.isProcessing = true;

    try {
        const userCheck = await db.query('SELECT 1 FROM users WHERE telegram_id = $1', [telegramId]);
        if (userCheck.rows.length === 0) {
            await db.query('INSERT INTO users (telegram_id, username) VALUES ($1, $2)', [telegramId, username]);
        }
    } catch (err) {
        console.error('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–≤—Å—Ç–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (askNextRank):', err);
        await ctx.reply('‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return ctx.scene.enter('mainMenuScene');
    }

    let profileId;
    try {
      const profileRes = await db.query(
        'INSERT INTO profiles (telegram_id, name, age, gender, bio) VALUES ($1, $2, $3, $4, $5) RETURNING id',
        [telegramId, name, age, gender, bio]
      );
      if (profileRes.rows.length === 0) {
        console.error('‚ùó –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª id (askNextRank)');
        await ctx.reply('‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return ctx.scene.enter('mainMenuScene');
      }
      profileId = profileRes.rows[0].id;
    } catch (err) {
      console.error('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è (askNextRank):', err);
      await ctx.reply('‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return ctx.scene.enter('mainMenuScene');
    }

    for (const gameId of selectedGames) {
      const rankId = selectedRanks[gameId] || null;
      try {
        await db.query(
          'INSERT INTO profile_games (profile_id, game_id, rank_id) VALUES ($1, $2, $3)',
          [profileId, gameId, rankId]
        );
      } catch (err) {
        console.error(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∏–≥—Ä—ã (askNextRank, gameId: ${gameId}):`, err);
        await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∏–≥—Ä—ã (askNextRank, gameId: ${gameId}): ${err.message}`);
        await ctx.reply('‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return ctx.scene.enter('mainMenuScene');
      }
    }


    await ctx.reply('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', mainMenuKeyboard(false));
    return ctx.scene.enter('mainMenuScene');
  }

  let ranks = [];
  try {
    const ranksRes = await db.query('SELECT id, name FROM ranks WHERE game_id = $1 ORDER BY "order"', [game.id]);
    ranks = ranksRes.rows;
  } catch (err) {
    console.error(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–Ω–≥–æ–≤ –¥–ª—è –∏–≥—Ä—ã (gameId: ${game.id}):`, err);
    await ctx.reply('‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–Ω–≥–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return ctx.scene.enter('mainMenuScene');
  }


  const buttons = ranks.map(r => [
    Markup.button.callback(escapeMarkdown(r.name), `rank_${game.id}_${r.id}`)
  ]);
  buttons.push([Markup.button.callback('–ë–µ–∑ —Ä–∞–Ω–≥–∞', `rank_${game.id}_null`)]);

  try {
    await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–Ω–≥ –¥–ª—è ${escapeMarkdown(game.name)}:`, Markup.inlineKeyboard(buttons));
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
  }

}

// üîÅ Helper: –ò–≥—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async function sendGameSelection(ctx, page = 0) {
  const { availableGames, selectedGames } = ctx.wizard.state;
  const pageSize = 10;
  const totalPages = Math.ceil(availableGames.length / pageSize);
  const start = page * pageSize;
  const end = start + pageSize;
  const gamesPage = availableGames.slice(start, end);

  const buttons = [];
  for (let i = 0; i < gamesPage.length; i += 2) {
    const row = [];
    for (let j = i; j < i + 2 && j < gamesPage.length; j++) {
      const game = gamesPage[j];
      const selected = selectedGames.includes(game.id);
      row.push(Markup.button.callback(`${selected ? '‚úÖ' : '‚ûï'} ${escapeMarkdown(game.name)}`, `game_${game.id}_${page}`));
    }
    buttons.push(row);
  }

  const navButtons = [];
  if (page > 0) navButtons.push(Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `page_${page - 1}`));
  if (page < totalPages - 1) navButtons.push(Markup.button.callback('‚û°Ô∏è –í–ø–µ—Ä–µ–¥', `page_${page + 1}`));
  if (selectedGames.length > 0) navButtons.push(Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', 'game_done'));

  if (navButtons.length > 0) buttons.push(navButtons);

  try {
    await ctx.reply('üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—ã (–¥–æ 3):', Markup.inlineKeyboard(buttons));
  } catch (err) {
    console.error('[sendGameSelection] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
  }
}

// üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
registrationScene.action(/^page_(\d+)$/, async (ctx) => {
  if (isCallbackHandled(ctx)) return;
  const page = parseInt(ctx.match[1]);
  try {
    await ctx.deleteMessage(); // —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  } catch (err) {
    console.error('[page handler] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
  }
  await sendGameSelection(ctx, page);
});



export default registrationScene;