import { Scenes, Markup } from 'telegraf';
import db from '../db.js';
import { validateName, validateAge, validateBio } from '../utils/validators.js';
import { logToAdmin } from '../utils/logToAdmin.js';


const getMainKeyboard = () => Markup.keyboard([
  ['‚úèÔ∏è –ò–º—è', 'üìÖ –í–æ–∑—Ä–∞—Å—Ç'],
  ['üë§ –ü–æ–ª', 'üí¨ –û–ø–∏—Å–∞–Ω–∏–µ'],
  ['üéÆ –ò–≥—Ä—ã –∏ —Ä–∞–Ω–≥–∏'],
  ['üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]).resize();

const editProfileWizardScene = new Scenes.WizardScene(
  'editProfileWizardScene',

  // –®–∞–≥ 0: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  async (ctx) => {
    try {
      await ctx.reply('üõ† –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', getMainKeyboard());
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', err);
    }
    return ctx.wizard.next();
  },

  // –®–∞–≥ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
  async (ctx) => {
    const choice = ctx.message?.text;

    switch (choice) {
      case '‚úèÔ∏è –ò–º—è':
        ctx.wizard.state.editing = 'name';
        try {
          await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):');
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', err);
        }
        return ctx.wizard.selectStep(2);

      case 'üìÖ –í–æ–∑—Ä–∞—Å—Ç':
        ctx.wizard.state.editing = 'age';
        try {
          await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 12 –¥–æ 99):');
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', err);
        }
        return ctx.wizard.selectStep(2);

      case 'üë§ –ü–æ–ª':
        ctx.wizard.state.editing = 'gender';
        try {
          await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:', Markup.inlineKeyboard([
            [Markup.button.callback('üë® –ú—É–∂—Å–∫–æ–π', 'gender_male')],
            [Markup.button.callback('üë© –ñ–µ–Ω—Å–∫–∏–π', 'gender_female')],
            [Markup.button.callback('‚ùì –ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å', 'gender_unspecified')],
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_main')]
          ]));
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', err);
        }
        return;

      case 'üí¨ –û–ø–∏—Å–∞–Ω–∏–µ':
        ctx.wizard.state.editing = 'bio';
        try {
          await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤):');
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', err);
        }
        return ctx.wizard.selectStep(2);

      case 'üéÆ –ò–≥—Ä—ã –∏ —Ä–∞–Ω–≥–∏':
        return ctx.scene.enter('editGamesScene');

      case 'üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return ctx.scene.enter('profileScene');

      default:
        try {
          return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.');
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', err);
        }
    }
  },

  // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
  async (ctx) => {
    const value = ctx.message?.text?.trim();
    const { editing } = ctx.wizard.state;
    const telegramId = ctx.from.id.toString();

    if (value === 'üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
      return ctx.scene.enter('profileScene');
    }

    try {
      if (editing === 'name') {
        if (!validateName(value)) {
          try {
            return ctx.reply('‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã, –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.');
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', err);
          }
        }
        try {
          await db.query('UPDATE profiles SET name = $1 WHERE telegram_id = $2', [value, telegramId]);
          await ctx.reply('‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏:', err);
          await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ (editProfileWizardScene): ${err.message}`);
          await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          return ctx.scene.enter('editProfileWizardScene');
        }

      }

      else if (editing === 'age') {
        const age = parseInt(value, 10);
        if (!validateAge(age)) {
          try {
            return ctx.reply('‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 12 –¥–æ 99.');
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', err);
            await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (editProfileWizardScene): ${err.message}`);
          }
        }
        try {
          await db.query('UPDATE profiles SET age = $1 WHERE telegram_id = $2', [age, telegramId]);
          await ctx.reply('‚úÖ –í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!');
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞:', err);
          await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ (editProfileWizardScene): ${err.message}`);
          await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          return ctx.scene.enter('editProfileWizardScene');
        }

      }

      else if (editing === 'bio') {
        if (!validateBio(value)) {
          try {
            return ctx.reply('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤.');
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', err);
          }
        }
        try {
          await db.query('UPDATE profiles SET bio = $1 WHERE telegram_id = $2', [value, telegramId]);
          await ctx.reply('‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è:', err);
          await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è (editProfileWizardScene): ${err.message}`);
          await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          return ctx.scene.enter('editProfileWizardScene');
        }

      }

      return ctx.scene.enter('editProfileWizardScene');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
      await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö (editProfileWizardScene): ${err.message}`);
      try {
        return ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', err);
      }
    }
  }
);

// Inline: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–∞
editProfileWizardScene.action(/^gender_(male|female|unspecified)$/, async (ctx) => {
  const gender = ctx.match[1];
  const telegramId = ctx.from.id.toString();

  try {
    await ctx.answerCbQuery();
    await ctx.editMessageReplyMarkup(null).catch((err) => {
      if (!err.description?.includes('message is not modified')) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫:', err);
        logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ (editProfileWizardScene): ${err.message}`);
      }
    });

    try {
      await db.query('UPDATE profiles SET gender = $1 WHERE telegram_id = $2', [gender, telegramId]);
      await ctx.reply('‚úÖ –ü–æ–ª –æ–±–Ω–æ–≤–ª—ë–Ω!');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–∞:', err);
      await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–∞ (editProfileWizardScene, –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫): ${err.message}`);
      await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return ctx.scene.enter('editProfileWizardScene');
    }

    try {
      await ctx.reply('üõ† –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', getMainKeyboard());
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', err);
    }
    return ctx.wizard.selectStep(1);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–∞:', err);
    try {
      return ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', err);
    }
  }
});

// Inline: –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
editProfileWizardScene.action('back_to_main', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.editMessageReplyMarkup(null).catch((err) => {
    if (!err.description?.includes('message is not modified')) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ reply_markup:', err);
      logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ reply_markup (editProfileWizardScene): ${err.message}`);
    }
  });
  try {
    await ctx.reply('üõ† –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', getMainKeyboard());
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', err);
  }
  return ctx.wizard.selectStep(1);
});

export default editProfileWizardScene;