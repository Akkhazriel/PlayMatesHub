import { Scenes, Markup } from 'telegraf';
import { getUsersForBroadcast, sendBroadcastToUsers } from '../services/broadcast.service.js';
import { escapeMarkdown } from '../utils/escapeMarkdown.js';

const adminBroadcastScene = new Scenes.WizardScene('adminBroadcastScene',

  // –®–∞–≥ 0 ‚Äî –≤—ã–±–æ—Ä –∏–≥—Ä—ã
  async (ctx) => {
    if (!ctx.session.isAdmin) return ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');

    ctx.wizard.state.broadcast = {};
    const games = await getUsersForBroadcast('gamesList');

    const buttons = games.map(g => [Markup.button.callback(g.name, `admin_broadcast_game_${g.id}`)]);
    buttons.push([Markup.button.callback('üì¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 'admin_broadcast_all')]);
    buttons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin_broadcast_back')]);

    await ctx.reply('üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', Markup.inlineKeyboard(buttons));
  },

  // –®–∞–≥ 1 ‚Äî —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
  async (ctx) => {
    const text = ctx.message?.text?.trim();
    if (!text || text.length < 5) {
      return ctx.reply('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤.');
    }

    ctx.wizard.state.broadcast.text = text;
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', 'admin_broadcast_confirm')],
      [Markup.button.callback('üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç', 'admin_broadcast_edit')],
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin_broadcast_back')]
    ]);
    
    try {
      await ctx.reply(`üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n${escapeMarkdown(text)}`, {
        parse_mode: 'MarkdownV2',
        reply_markup: keyboard.reply_markup
      });
    } catch (err) {
      console.error('[Broadcast Preview Error]', err);
      await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.');
    }

    return ctx.wizard.selectStep(2);
  },

  // –®–∞–≥ 2 ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  async (ctx) => {
    await ctx.reply('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.');
    return ctx.wizard.selectStep(1);
  }
);

// –í—ã–±–æ—Ä –∏–≥—Ä—ã
adminBroadcastScene.action(/admin_broadcast_game_(\d+)/, async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.deleteMessage().catch(() => {});
  ctx.wizard.state.broadcast = { gameId: parseInt(ctx.match[1]) };
  await ctx.reply('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (MarkdownV2):');
  return ctx.wizard.selectStep(1);
});

// –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
adminBroadcastScene.action('admin_broadcast_all', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.deleteMessage().catch(() => {});
  ctx.wizard.state.broadcast = { gameId: null };
  await ctx.reply('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (MarkdownV2):');
  return ctx.wizard.selectStep(1);
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
adminBroadcastScene.action('admin_broadcast_confirm', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.deleteMessage().catch(() => {});

  const { gameId, text } = ctx.wizard.state.broadcast;
  const users = await getUsersForBroadcast(gameId);
  const result = await sendBroadcastToUsers(users, text, ctx.telegram);

  await ctx.reply(`üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:
‚úÖ –£—Å–ø–µ—à–Ω–æ: ${result.success}
‚ùå –û—à–∏–±–æ–∫: ${result.failed}
üî¢ –í—Å–µ–≥–æ: ${users.length}`);

try {
  return ctx.scene.enter('adminPanelScene');
} catch (err) {
  console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ adminPanelScene:', err);
  await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.');
}

});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
adminBroadcastScene.action('admin_broadcast_edit', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.deleteMessage().catch(() => {});
  await ctx.reply('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:');
  return ctx.wizard.selectStep(1);
});

// –ù–∞–∑–∞–¥
adminBroadcastScene.action('admin_broadcast_back', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.deleteMessage().catch(() => {});
  try {
    return ctx.scene.enter('adminPanelScene');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ adminPanelScene:', err);
    await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.');
  }
  
});

export default adminBroadcastScene;
