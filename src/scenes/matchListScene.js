import { Scenes, Markup } from 'telegraf';
import db from '../db.js';
import { isCallbackHandled } from '../utils/callbackGuard.js';
import formatTavernCard from '../utils/formatTavernCard.js';
import { logToAdmin } from '../utils/logToAdmin.js';

function goToProfileScene(ctx) {
  return ctx.scene.enter('profileScene');
}

const matchListScene = new Scenes.WizardScene('matchListScene',

  async (ctx) => {
    if (ctx.session?.isProcessing) return;
    ctx.session.isProcessing = true;
    try {
      const telegramId = ctx.from.id.toString();
      let profileId;
      try {
        const profileRes = await db.query(
          'SELECT id FROM profiles WHERE telegram_id = $1',
          [telegramId]
        );
        if (profileRes.rows.length === 0) {
          console.warn(`‚ùó –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è telegramId: ${telegramId}`);
          await ctx.reply('‚ùó –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å –∑–∞–Ω–æ–≤–æ!');
          return ctx.scene.enter('registrationScene');
        }
        profileId = profileRes.rows[0].id;
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ—Ñ–∏–ª—è:', err);
        await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ—Ñ–∏–ª—è (matchListScene): ${err.message}`);
        await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.');
        return goToProfileScene(ctx);
      }


      if (!profileId) {
        try {
          await ctx.reply('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è', err);
        }
        return goToProfileScene(ctx);
      }

      let matches = [];
      try {
        const { rows } = await db.query(`
          SELECT 
            m.id AS match_id, 
            m.matched_at, 
            p.name, 
            p.age, 
            p.gender, 
            p.bio, 
            p.steam_id, 
            u.username,
            pr.expires_at,
            ARRAY_AGG(g.name || ' ‚Äî ' || COALESCE(r.name, '–ë–µ–∑ —Ä–∞–Ω–≥–∞')) AS games
          FROM matches m
          JOIN profiles p ON p.id = CASE WHEN m.user1_profile_id = $1 THEN m.user2_profile_id ELSE m.user1_profile_id END
          JOIN users u ON u.telegram_id = p.telegram_id
          LEFT JOIN profile_games pg ON pg.profile_id = p.id
          LEFT JOIN games g ON g.id = pg.game_id
          LEFT JOIN ranks r ON r.id = pg.rank_id
          LEFT JOIN premium pr ON pr.profile_id = p.id 
          WHERE (m.user1_profile_id = $1 OR m.user2_profile_id = $1)
            AND m.matched_at >= NOW() - INTERVAL '14 days'
          GROUP BY m.id, p.name, p.age, p.gender, p.bio, p.steam_id, u.username, pr.expires_at, m.matched_at
          ORDER BY m.matched_at DESC
        `, [profileId]);
        matches = rows;
      } catch (err) {
        if (!matches.length) {
          try {
            await ctx.reply('üòï –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º—ç—Ç—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è', err);
            await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è (matchListScene, profileId –Ω–µ –Ω–∞–π–¥–µ–Ω): ${err.message}`);
          }
          return goToProfileScene(ctx);
        }
      }

      ctx.wizard.state.matches = matches;
      ctx.wizard.state.index = 0;

      return showMatch(ctx);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º—ç—Ç—á–µ–π:', err);
      await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º—ç—Ç—á–µ–π (matchListScene, –≤–µ—Ä—Ö–Ω–∏–π catch): ${err.message}`);
      try {
        await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º—ç—Ç—á–∏.');
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è', err);
        await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è (matchListScene, –≤–µ—Ä—Ö–Ω–∏–π catch): ${err.message}`);
      }
      return goToProfileScene(ctx);
    } finally {
      ctx.session.isProcessing = false;
    }
  }
);

// === –ò–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

matchListScene.action('next_match', async (ctx) => {
  if (ctx.session?.isProcessing) return;
  ctx.session.isProcessing = true;
  try {
    if (isCallbackHandled?.(ctx)) return;
    await ctx.answerCbQuery();

    ctx.wizard.state.index++;
    if (ctx.wizard.state.index >= ctx.wizard.state.matches.length) {
      ctx.wizard.state.index = 0;
      try {
        await ctx.reply('üîÅ –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –º—ç—Ç—á–∏. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –ø–µ—Ä–≤–æ–º—É.');
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è', err);
      }
    }

    return showMatch(ctx);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ next_match:', err);
    await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ next_match (matchListScene): ${err.message}`);
    return goToProfileScene(ctx);
  } finally {
    ctx.session.isProcessing = false;
  }
});

matchListScene.action(/^delete_match_(\d+)$/, async (ctx) => {
  if (ctx.session?.isProcessing) return;
  ctx.session.isProcessing = true;
  try {
    if (isCallbackHandled?.(ctx)) return;
    await ctx.answerCbQuery();
    const matchId = parseInt(ctx.match[1]);

    try {
      await db.query('DELETE FROM matches WHERE id = $1', [matchId]);
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º—ç—Ç—á–∞ (id: ${matchId}):`, err);
      await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º—ç—Ç—á–∞ (matchListScene, id: ${matchId}): ${err.message}`);
      await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º—ç—Ç—á.');
      return goToProfileScene(ctx);
    }

    await ctx.editMessageReplyMarkup(null);
    try {
      await ctx.reply('üóë –ú—ç—Ç—á —É–¥–∞–ª—ë–Ω.');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è', err);
      await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è (matchListScene, —É–¥–∞–ª–µ–Ω–∏–µ –º—ç—Ç—á–∞): ${err.message}`);
    }

    ctx.wizard.state.matches = ctx.wizard.state.matches.filter(m => m.match_id !== matchId);
    ctx.wizard.state.index = 0;

    if (!ctx.wizard.state.matches.length) {
      try {
        await ctx.reply('üòï –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –º—ç—Ç—á–µ–π.');
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è', err);
      }
      return goToProfileScene(ctx);
    }

    return showMatch(ctx);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º—ç—Ç—á–∞:', err);
    try {
      await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º—ç—Ç—á.');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è', err);
    }
    return goToProfileScene(ctx);
  } finally {
    ctx.session.isProcessing = false;
  }
});

matchListScene.action('exit_matches', async (ctx) => {
  if (ctx.session?.isProcessing) return;
  ctx.session.isProcessing = true;
  try {
    if (isCallbackHandled?.(ctx)) return;
    await ctx.answerCbQuery();
    await ctx.editMessageReplyMarkup(null);
    return goToProfileScene(ctx);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ matchListScene:', err);
    await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ matchListScene: ${err.message}`);
    return goToProfileScene(ctx);
  } finally {
    ctx.session.isProcessing = false;
  }
});

// === –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º—ç—Ç—á–∞ ===

async function showMatch(ctx) {
  const match = ctx.wizard.state.matches?.[ctx.wizard.state.index];
  if (!match) {
    try {
      await ctx.reply('üôÅ –ë–æ–ª—å—à–µ –Ω–µ—Ç –º—ç—Ç—á–µ–π.');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è', err);
    }
    return goToProfileScene(ctx);
  }

  // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å:
  let steamGames = [];
  if (match.steam_id) {
    try {
      const { rows } = await db.query('SELECT appid, playtime_hours FROM steam_stats WHERE steam_id = $1', [match.steam_id]);
      steamGames = rows.map(row => ({
        appid: row.appid,
        name: row.name,
        playtime_forever: row.playtime_hours * 60
      }));
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Steam-–∏–≥—Ä –¥–ª—è steam_id: ${match.steam_id}`, err);
      await logToAdmin(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Steam-–∏–≥—Ä (matchListScene, steam_id: ${match.steam_id}): ${err.message}`);
      steamGames = [];
    }
  }

  match.is_premium = match.expires_at && new Date(match.expires_at) > new Date();

  const text = formatTavernCard({ ...match }, {
    isOwner: false,
    premiumUntil: match.expires_at || null,
    showContacts: true,
    steamGames
  });

  try {
    await ctx.replyWithMarkdown(text, Markup.inlineKeyboard([
      [Markup.button.callback('üîÑ –°–ª–µ–¥—É—é—â–∏–π', 'next_match')],
      [Markup.button.callback('‚ùå –£–¥–∞–ª–∏—Ç—å –º—ç—Ç—á', `delete_match_${match.match_id}`)],
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'exit_matches')]
    ]));
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', err);
  }

}

export default matchListScene;